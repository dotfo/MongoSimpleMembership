{"name":"MongoSimpleMembership","tagline":"SimpleMembership providers (Membership & Role) using MongoDB as the backing store","body":"# SimpleMembership providers using MongoDB as the backing store\r\n\r\nThis this a SimpleMembership implementation using MongoDB as the backing store that provides a custom Membership provider (ExtendedMembershipProvider to be exact) and Role provider.\r\n\r\nFor more information about SimpleMembership see this post by Jon Galloway : [SimpleMembership, Membership Providers, Universal Providers and the new ASP.NET 4.5 Web Forms and ASP.NET MVC 4 templates](http://weblogs.asp.net/jgalloway/archive/2012/08/29/simplemembership-membership-providers-universal-providers-and-the-new-asp-net-4-5-web-forms-and-asp-net-mvc-4-templates.aspx)\r\n\r\n## Installation\r\n\r\nAvailable on [NuGet](http://nuget.org/packages/LyphTEC.MongoSimpleMembership/):\r\n\r\n```\r\nPM> Install-Package LyphTEC.MongoSimpleMembership\r\n```\r\n\r\n## Required changes\r\n\r\nYou must complete the following steps after you have installed the NuGet package before your app will run:\r\n\r\n1.  Configure your data connection string to the MongoDB database\r\n\r\n    eg.\r\n\r\n    ```xml\r\n      <connectionStrings>\r\n        <clear/>\r\n        <add name=\"MongoSimpleMembership\" connectionString=\"mongodb://localhost/SimpleMembership?safe=true\"  />\r\n      </connectionStrings>\r\n    ```\r\n\r\n    Note that the connection string must also include the database name. In the example above, this will use the database named \"SimpleMembership\".   \r\n\r\n2.  Update the system.web/membership & system.web/roleManager sections to use the connection string name as defined above\r\n\r\n    Also make sure that the \"defaultProvider\" attributes are set to use the matching MongoSimpleMembership provider names.\r\n\r\n    eg.\r\n\r\n    ```xml\r\n      <membership defaultProvider=\"MongoSimpleMembershipProvider\">\r\n        <providers>\r\n          <clear />\r\n          <add name=\"MongoSimpleMembershipProvider\" type=\"LyphTEC.MongoSimpleMembership.MongoSimpleMembershipProvider, LyphTEC.MongoSimpleMembership\" connectionStringName=\"MongoSimpleMembership\" />\r\n        </providers>\r\n      </membership>\r\n\r\n      <roleManager enabled=\"true\" defaultProvider=\"MongoRoleProvider\">\r\n        <providers>\r\n          <clear />\r\n          <add name=\"MongoRoleProvider\" type=\"LyphTEC.MongoSimpleMembership.MongoRoleProvider, LyphTEC.MongoSimpleMembership\" connectionStringName=\"MongoSimpleMembership\" />\r\n        </providers>\r\n      </roleManager>\r\n    ```\r\n   \r\n3.  If you are using the default \"ASP.NET MVC4 Internet\" template. You must make some changes to AccountController:\r\n\r\n*   Remove the [InitializeSimpleMembership] attribute (this is the ActionFilterAttribute defined in Filters/InitializeSimpleMembershipAttribute.cs).\r\n    This used by the default SimpleMembershipProvider that needs to initialize the SQL Server.\r\n    Since we are not using SQL Server, this is no longer required.\r\n\r\n*   Make changes to the ExternalLoginConfirmation() method to remove Entity Framework related hooks used by the default SimpleMembershipProvider.\r\n\r\n    Here's what it looks like before the change: \r\n\r\n    ```csharp\r\n    [HttpPost]\r\n    [AllowAnonymous]\r\n    [ValidateAntiForgeryToken]\r\n    public ActionResult ExternalLoginConfirmation(RegisterExternalLoginModel model, string returnUrl)\r\n    {\r\n        string provider = null;\r\n        string providerUserId = null;\r\n\r\n        if (User.Identity.IsAuthenticated || !OAuthWebSecurity.TryDeserializeProviderUserId(model.ExternalLoginData, out provider, out providerUserId))\r\n        {\r\n            return RedirectToAction(\"Manage\");\r\n        }\r\n\r\n        if (ModelState.IsValid)\r\n        {\r\n            // Insert a new user into the database\r\n            using (UsersContext db = new UsersContext())\r\n            {\r\n                UserProfile user = db.UserProfiles.FirstOrDefault(u => u.UserName.ToLower() == model.UserName.ToLower());\r\n                // Check if user already exists\r\n                if (user == null)\r\n                {\r\n                    // Insert name into the profile table\r\n                    db.UserProfiles.Add(new UserProfile { UserName = model.UserName });\r\n                    db.SaveChanges();\r\n\r\n                    OAuthWebSecurity.CreateOrUpdateAccount(provider, providerUserId, model.UserName);\r\n                    OAuthWebSecurity.Login(provider, providerUserId, createPersistentCookie: false);\r\n\r\n                    return RedirectToLocal(returnUrl);\r\n                }\r\n                else\r\n                {\r\n                    ModelState.AddModelError(\"UserName\", \"User name already exists. Please enter a different user name.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        ViewBag.ProviderDisplayName = OAuthWebSecurity.GetOAuthClientData(provider).DisplayName;\r\n        ViewBag.ReturnUrl = returnUrl;\r\n        return View(model);\r\n    }\r\n    ```\r\n    \r\n    And here's what it should look like after the change:   \r\n\r\n    ```csharp\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [ValidateAntiForgeryToken]\r\n        public ActionResult ExternalLoginConfirmation(RegisterExternalLoginModel model, string returnUrl)\r\n        {\r\n            string provider = null;\r\n            string providerUserId = null;\r\n\r\n            if (User.Identity.IsAuthenticated || !OAuthWebSecurity.TryDeserializeProviderUserId(model.ExternalLoginData, out provider, out providerUserId))\r\n            {\r\n                return RedirectToAction(\"Manage\");\r\n            }\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n                var userId = WebSecurity.GetUserId(model.UserName);\r\n\r\n                if (userId == -1)\r\n                {\r\n                    // TODO : Add custom user profile logic here\r\n\r\n                    // this will create a non-local account\r\n                    OAuthWebSecurity.CreateOrUpdateAccount(provider, providerUserId, model.UserName);\r\n                    OAuthWebSecurity.Login(provider, providerUserId, createPersistentCookie: false);\r\n\r\n                    return RedirectToLocal(returnUrl);\r\n                }\r\n                else\r\n                {\r\n                    ModelState.AddModelError(\"UserName\", \"User name already exists. Please enter a different user name.\");\r\n                }\r\n            }\r\n\r\n            ViewBag.ProviderDisplayName = OAuthWebSecurity.GetOAuthClientData(provider).DisplayName;\r\n            ViewBag.ReturnUrl = returnUrl;\r\n            return View(model);\r\n        }\r\n    ```   \r\n\r\n    See the [sample MVC4 app](https://github.com/lyphtec/LyphTEC.MongoSimpleMembership/tree/master/src/LyphTEC.MongoSimpleMembership.Sample) for reference.   \r\n\r\n## Customising the storage collection names\r\n\r\nBy default, the [entities](https://github.com/lyphtec/LyphTEC.MongoSimpleMembership/tree/master/src/LyphTEC.MongoSimpleMembership/Models) are stored in collections with the following names:\r\n\r\n![Default collection names](http://static.lyphtec.com/projects/msm/default_collections.png)\r\n\r\nThis matches the table names used in the standard SQL Server based SimpleMembershipProvider.\r\n\r\nIf desired, you can change the default collection names by using the following appSettings:\r\n\r\n```xml\r\n  <appSettings>\r\n    <add key=\"MongoSimpleMembership:MembershipAccountName\" value=\"webpages_Membership\" />\r\n    <add key=\"MongoSimpleMembership:OAuthMembershipName\" value=\"webpages_OAuthMembership\" />\r\n    <add key=\"MongoSimpleMembership:OAuthTokenName\" value=\"webpages_OAuthToken\" />\r\n    <add key=\"MongoSimpleMembership:RoleName\" value=\"webpages_Role\" />\r\n  </appSettings>\r\n```\r\n\r\n## License\r\n\r\n[Apache License, Version 2.0](https://github.com/lyphtec/LyphTEC.MongoSimpleMembership/blob/master/license.txt)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}